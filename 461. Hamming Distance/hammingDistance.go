



func hammingDistance(x int, y int) int {
    
    b32 := []int { 0x00000001, 0x00000002, 0x00000004, 0x00000008,
                   0x00000010, 0x00000020, 0x00000040, 0x00000080,
                   0x00000100, 0x00000200, 0x00000400, 0x00000800,
                   0x00001000, 0x00002000, 0x00004000, 0x00008000,
                   0x00010000, 0x00020000, 0x00040000, 0x00080000,
                   0x00100000, 0x00200000, 0x00400000, 0x00800000,
                   0x01000000, 0x02000000, 0x04000000, 0x08000000,
                   0x10000000, 0x20000000, 0x40000000, 0x80000000 }
    count := 0
    if( 0!=(b32[0]&x)^(b32[0]&y) ) { count++ }
    if( 0!=(b32[1]&x)^(b32[1]&y) ) { count++ }
    if( 0!=(b32[2]&x)^(b32[2]&y) ) { count++ }
    if( 0!=(b32[3]&x)^(b32[3]&y) ) { count++ }
    if( 0!=(b32[4]&x)^(b32[4]&y) ) { count++ }
    if( 0!=(b32[5]&x)^(b32[5]&y) ) { count++ }
    if( 0!=(b32[6]&x)^(b32[6]&y) ) { count++ }
    if( 0!=(b32[7]&x)^(b32[7]&y) ) { count++ }
    if( 0!=(b32[8]&x)^(b32[8]&y) ) { count++ }
    if( 0!=(b32[9]&x)^(b32[9]&y) ) { count++ }
    if( 0!=(b32[10]&x)^(b32[10]&y) ) { count++ }
    if( 0!=(b32[11]&x)^(b32[11]&y) ) { count++ }
    if( 0!=(b32[12]&x)^(b32[12]&y) ) { count++ }
    if( 0!=(b32[13]&x)^(b32[13]&y) ) { count++ }
    if( 0!=(b32[14]&x)^(b32[14]&y) ) { count++ }
    if( 0!=(b32[15]&x)^(b32[15]&y) ) { count++ }
    if( 0!=(b32[16]&x)^(b32[16]&y) ) { count++ }
    if( 0!=(b32[17]&x)^(b32[17]&y) ) { count++ }
    if( 0!=(b32[18]&x)^(b32[18]&y) ) { count++ }
    if( 0!=(b32[19]&x)^(b32[19]&y) ) { count++ }
    if( 0!=(b32[20]&x)^(b32[20]&y) ) { count++ }
    if( 0!=(b32[21]&x)^(b32[21]&y) ) { count++ }
    if( 0!=(b32[22]&x)^(b32[22]&y) ) { count++ }
    if( 0!=(b32[23]&x)^(b32[23]&y) ) { count++ }
    if( 0!=(b32[24]&x)^(b32[24]&y) ) { count++ }
    if( 0!=(b32[25]&x)^(b32[25]&y) ) { count++ }
    if( 0!=(b32[26]&x)^(b32[26]&y) ) { count++ }
    if( 0!=(b32[27]&x)^(b32[27]&y) ) { count++ }
    if( 0!=(b32[28]&x)^(b32[28]&y) ) { count++ }
    if( 0!=(b32[29]&x)^(b32[29]&y) ) { count++ }
    if( 0!=(b32[30]&x)^(b32[30]&y) ) { count++ }
    if( 0!=(b32[31]&x)^(b32[31]&y) ) { count++ }

    return count
}